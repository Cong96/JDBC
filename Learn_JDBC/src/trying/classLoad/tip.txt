Java类加载的延迟初始化

《Java 类的装载、链接和初始化》中提到，链接的最后一步是解析，即对符号引用的解析。但这不是必须的，可以等到相应的符号引用第一次使用时再解析。

而类的初始化是在链接之后的（注意了，根据不同 JVM 有不同的实现方式，在类初始化的时候，可能已经完成了所有的符号引用的解析，也可能没有），本文所写的就是类的初始化的时机问题。

Java 类的动态加载机制规定，在类被主动使用(active use)之前，必须已经完成类的初始化。既然有主动调用，那么就有被动调用了。这两者有哪些区别呢？

下面列出所有主动使用的情况，用以区分两者：

1.创造该类的一个新的实例
2.调用这个类中的静态方法
3.获取类或者接口中的非常量的静态变量
4.利用反射调用方法
5.初始化该类的某子类
6.被制定为 JVM 开始运行时必须初始化的类